// Ada I2C 16chサーボドライバ

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <linux/i2c-dev.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <pigpio.h>

// Ada 16ch PWMサーボドライバクラス

#define PCA9685_SUBADR1 0x2
#define PCA9685_SUBADR2 0x3
#define PCA9685_SUBADR3 0x4

#define PCA9685_MODE1 0x0
#define PCA9685_PRESCALE 0xFE

#define LED0_ON_L 0x6
#define LED0_ON_H 0x7
#define LED0_OFF_L 0x8
#define LED0_OFF_H 0x9

#define ALLLED_ON_L 0xFA
#define ALLLED_ON_H 0xFB
#define ALLLED_OFF_L 0xFC
#define ALLLED_OFF_H 0xFD

class Ada_ServoDriver
{
public:
	Ada_ServoDriver(int i2c);
	void reset(void);
	void setPWMFreq(float frea);
	void setPWM(uint8_t srvNo, uint16_t onTime, uint16_t offTime);
	void setServoPulse(uint8_t ch, double pulseWidth_us);
	uint8_t read8(uint8_t addr);
	void write8(uint8_t addr, uint8_t d);

private:
	uint8_t _i2cAddr;
	int _i2c;
};


Ada_ServoDriver::Ada_ServoDriver(int i2c)
{
	printf("コンストラクタ呼び出し成功\n");
	_i2c = i2c;
}

void Ada_ServoDriver::write8(uint8_t addr, uint8_t d)
{
	uint8_t sendData[2];

	sendData[0] = addr;
	sendData[1] = d;
	if (write(_i2c, sendData, 2) != 2)
	{
		printf("Faild to send i2c\n");
	}
}

uint8_t Ada_ServoDriver::read8(uint8_t addr)
{
	uint8_t sendData;
	uint8_t readData;

	sendData = addr;
	if (write(_i2c, &sendData, 1) != 1)
	{
		printf("Failed to send i2c @read\n");
	}
	else
	{
		if (read(_i2c, &readData, 1) != 1)
		{
			printf("Failed to read i2c\n");
		}
	}

	return readData;
}

void Ada_ServoDriver::reset(void)
{
	printf("reset呼び出し\n");
	write8(PCA9685_MODE1, 0x0);
}

void Ada_ServoDriver::setPWMFreq(float freq)
{
	float prescaleval = 25000000;

	prescaleval /= 4096;
	prescaleval /= freq;
	prescaleval -= 1;
	printf("Estimated pre-scale: %f\n", prescaleval);

	uint8_t prescale = floor(prescaleval + 0.5);
	printf("Final pre-scale: %d\n", prescale);

	uint8_t oldmode = read8(PCA9685_MODE1);
	uint8_t newmode = (oldmode & 0x7F) | 0x10;
	write8(PCA9685_MODE1, newmode);
	write8(PCA9685_PRESCALE, prescale);
	write8(PCA9685_MODE1, oldmode);
	sleep(5);
	write8(PCA9685_MODE1, oldmode | 0xa1);
}

void Ada_ServoDriver::setPWM(uint8_t srvNo, uint16_t onTime, uint16_t offTime)
{
	uint8_t sendData[5];

	sendData[0] = LED0_ON_L + 4 * srvNo;
	sendData[1] = (uint8_t)(0x00ff & onTime);
	sendData[2] = (uint8_t)((0xff00 & onTime) >> 8);
	sendData[3] = (uint8_t)(0x00ff & offTime);
	sendData[4] = (uint8_t)((0xff00 & offTime) >> 8);

	if (write(_i2c, sendData, 5) != 5)
	{
		printf("Faild to send i2c @setPWM\n");
	}
}

#define SERVO_CONTROL_FREQUENCY 60
#define SERVO_CENTER_PULSE_WIDTH_US 1520
#define SERVO_CENTER_PULSE_WIDTH_US_FUTABA_OLD  1310
#define SERVO_RANGE_PULSE_WIDTH_US 1600

void Ada_ServoDriver::setServoPulse(uint8_t ch, double pulseWidth_us)
{
	double pulselength;
	double pulseWidth;

	// 1秒=1000000usを60Hzで割ってパルス長を算出。
	pulselength = 1000000 / SERVO_CONTROL_FREQUENCY;
	// 12bit(2^12=4096)分解能相当へ。1分解能当たりの時間算出。
	pulselength /= 4096;
	// PWMのパルス設定値を算出。
	pulseWidth = pulseWidth_us / pulselength;

	// PWM値設定。
	//  setPWM(channel, on_timing, off_timing)
	//  channelで指定したチャネルのPWM出力のon(0→1）になるタイミングと
	//  off(1→0)になるタイミングを0～4095で設定する。
	setPWM(ch, 0, pulseWidth);
}

//==================================================================================
// ロボットカー制御部分
//==================================================================================
#define IN1_GPIO_NO 	  18
#define IN2_GPIO_NO 	  19
#define PWM_FREQ		  60
#define SERVO_PIN		  15
#define RIGHT			 465
#define CENTER			 425
#define LEFT			 385
#define MOVE_SPEED		4000	// Max pulse length out of 4096
#define IN1 			  23	// right motor direction pin
#define IN2 			  24	// right motor direction pin
#define IN3 			  27	// left motor direction pin
#define IN4 			  22	// left motor direction pin
#define ENA 			   0	// Right motor speed PCA9685 port 0
#define ENB 			   1	// Left motor speed PCA9685 port 1

// Initialise the PCA9685 using the default address (0x40)
// Alternatively specify a different address and/or bus:
// pwm = Adafruit_PCA9685.PCA9685(address=0x41, busnum=2)
// Set frequency to 60hz, good for servos

void changespeed(int speed);
void stopcar(void);
void forward(void);
void backward(void);
void steer(int angle);

void changespeed(Ada_ServoDriver servo, int speed) {
	servo.setPWM(ENA, 0, speed);
	servo.setPWM(ENB, 0, speed);
}

void stopcar(Ada_ServoDriver servo) {
	gpioWrite(IN1, PI_LOW);
	gpioWrite(IN2, PI_LOW);
	gpioWrite(IN3, PI_LOW);
	gpioWrite(IN4, PI_LOW);
	changespeed(servo, 0);
}

void forward(Ada_ServoDriver servo) {
	gpioWrite(IN1, PI_HIGH);
	gpioWrite(IN2, PI_LOW);
	gpioWrite(IN3, PI_HIGH);
	gpioWrite(IN4, PI_LOW);
	changespeed(servo, MOVE_SPEED);
}

void backward(Ada_ServoDriver servo) {
	gpioWrite(IN1, PI_LOW);
	gpioWrite(IN2, PI_HIGH);
	gpioWrite(IN3, PI_LOW);
	gpioWrite(IN4, PI_HIGH);
	changespeed(servo, MOVE_SPEED);
}

void steer(Ada_ServoDriver servo, int angle) {
	if (angle > RIGHT) {
		angle = RIGHT;
	}
	else if (angle < LEFT) {
		angle = LEFT;
	}
	servo.setPWM(SERVO_PIN, 0, angle);
}

int main(void)
{
	int i2c;    // ファイルディスクリプタ
	int driverAddress = 0x40;

	int ret = gpioInitialise();
	if (ret < 0) {
		printf("GPIO初期化失敗\n");
		return 1;
	}

	//
	if ((i2c = open("/dev/i2c-1", O_RDWR)) < 0)
	{
		printf("Faild to open i2c port\n");
		exit(1);
	}
	printf("I2C Open成功\n");

	//
	if (ioctl(i2c, I2C_SLAVE, driverAddress) < 0)
	{
		printf("Unable to get bus access to talk to slave\n");
		exit(1);
	}
	printf("I2C SLAVE設定成功\n");

	Ada_ServoDriver servo(i2c);

	servo.reset();

	printf("100ms Sleep開始\n");
	usleep(100000);
	printf("100ms Sleep終了\n");

	// サーボ制御パルス周波数の設定。
	servo.setPWMFreq(SERVO_CONTROL_FREQUENCY);

	servo.setPWM(SERVO_PIN, 0, LEFT);
	sleep(1);
	servo.setPWM(SERVO_PIN, 0, RIGHT);
	sleep(1);
	servo.setPWM(SERVO_PIN, 0, CENTER);

	gpioSetMode(IN1, PI_OUTPUT);
	gpioSetMode(IN2, PI_OUTPUT);
	gpioSetMode(IN3, PI_OUTPUT);
	gpioSetMode(IN4, PI_OUTPUT);

	steer(servo, CENTER);
	forward(servo);
	sleep(2);
	stopcar(servo);
	sleep(0.25);

	backward(servo);
	sleep(2);
	stopcar(servo);
	sleep(0.25);

	steer(servo, LEFT);
	forward(servo);
	sleep(2);

	steer(servo, RIGHT);
	forward(servo);
	sleep(2);

	backward(servo);
	sleep(2);

	steer(servo, LEFT);
	backward(servo);
	sleep(2);
	stopcar(servo);
	steer(servo, CENTER);

	sleep(2);
	servo.setPWM(SERVO_PIN, 0, 0);

	return 0;
}
